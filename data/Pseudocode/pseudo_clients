IMPORT default
IMPORT datetime
IMPORT time
IMPORT sys
IMPORT hashlib


FUNCTION client_menu(user_data, data_clients, data_carlist, data_transactions, login_index, space_cars, space_clients, space_transactions)
    

    title = user_data[2] + ", welcome back"
    DECLARE menu = ["Profile Settings", "Rent a car", "View Personal Rental History", "Update Password","Exit"]

    DOWHILE(1)
        DOWHILE(1)
            CALL FUNCTION print_title(title)
            CALL FUNCTION general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF (choice == '1' OR choice == '2' OR choice == '3' OR choice == '4' OR choice == '5') THEN
                BREAK
            ENDIF
        ENDDO

        
        IF (choice == '1') THEN
            CALL FUNCTION profile_menu(user_data, data_clients, login_index, space_clients)
        
        ELSE IF (choice == '2') THEN
            CALL FUNCTION rentcar_interface(user_data, data_clients, data_carlist, data_transactions, login_index, space_cars)
        
        ELSE IF (choice == '3') THEN
            CALL FUNCTION view_indhistory(user_data,data_transactions,space_transactions)
        
        ELSE IF (choice == '4') THEN
            CALL FUNCTION update_password(user_data, data_clients, login_index, space_clients)
        
        ELSE IF (choice == '5') THEN
            title = user_data[2] + ", you have successfully log out."
            CALL FUNCTION print_title(title)
            PRINT("")
            RETURN 
        ENDIF
    ENDDO



FUNCTION profile_menu(user_data, data_clients, login_index, space_clients)
    DOWHILE(1):    
        PRINT("\n")
        LOOP i FROM 0 TO <range(11) STEP +1
            IF (i ==3) THEN
                CONTINUE
            ENDIF
            NEXT i
            PRINT(data_clients[0][i] + ": " + user_data[i])
        ENDLOOP
    
        DECLARE menu = ["Edit", "Return"]
    
        DOWHILE(1): 
            PRINT("\n")   
            CALL FUNCTION general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF (choice == '1' OR choice == '2') THEN
                BREAK
            ENDIF
                
            PRINT("Error!")
        ENDDO
    
        IF (choice == '1') THEN
            CALL FUNCTION edit_profile(user_data, data_clients, login_index, space_clients)
        
        ELSE IF (choice == '2') THEN
            RETURN
        ENDIF
    ENDDO



FUNCTION edit_profile(user_data, data_clients, login_index, space_clients)
    PRINT("\nWhat do you want to edit?")
    DECLARE menu = ["Name", "Date of Birth", "License", "Phone Number", "Email", "Card", "Return"]
    
    DOWHILE(1)
        CALL FUNCTION general_menu(menu)
        PRINT("Please Select: ")
        READ choice
        IF (choice == '1' OR choice == '2' OR choice == '3' OR choice == '4' OR choice == '5' OR choice == '6' OR choice == '7') THEN
            BREAK
        ENDIF
    ENDDO
        
    IF (choice == '7') THEN
        RETURN
    ENDIF
    
    
    IF (choice == '1') THEN
        temp = CALL FUNCTION validation_length(space_clients[2])
        user_data[2] = temp
    
    ELSE IF (choice == '2') THEN
        temp = CALL FUNCTION validation_date()
        user_data[4] = temp
       
    ELSE IF (choice == '3') THEN
        temp = CALL FUNCTION validation_length(space_clients[5])
        user_data[5] = temp    
    
    ELSE IF (choice == '4') THEN
        temp = CALL FUNCTION validation_number(space_clients[6])
        user_data[6] = temp
    
    ELSE IF (choice == '5') THEN
        temp = CALL FUNCTION validation_email(space_clients[7])
        user_data[7] = temp

    ELSE IF (choice == '6') THEN
        temp = CALL FUNCTION validation_number(16)
        user_data[8] = temp
    ENDIF
    
    

    data_clients[login_index] = user_data
    

    
    WITH OPEN("./data/clients.txt",  mode = 'w') AS clients_file:
        LOOP line IN data_clients:
            temp = ",".join(line)
            clients_file.write(temp + '\n')
            NEXT line
        ENDLOOP
        
    RETURN

       
FUNCTION rentcar_interface(user_data, data_clients, data_carlist, data_transactions, login_index, space_cars)
    DOWHILE(1):    
        DECLARE menu = ["View All Available Cars", "Search for a  Car", "Book a Car","Return"]
        title = user_data[2] + ", do you want to rent a car?"
    
        DOWHILE(1)
            CALL FUNCTION print_title(title)
            CALL FUNCTION general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF (choice == '1' OR choice == '2' OR choice == '3' OR choice == '4') THEN
                BREAK
            ENDIF
        ENDDO
        
        IF (choice == '1') THEN
            CALL FUNCTION print_title("Please remember the Car ID to book a car. ")
            PRINT("")
            CALL FUNCTION print_table(data_carlist, 4, space_cars, login_index)
            CALL FUNCTION view_allcars(user_data, data_carlist, space_cars)
        ENDIF
        
        IF (choice == '2') THEN
            CALL FUNCTION print_title("Please remember the Car ID to book a car. ")
            PRINT("")
            CALL FUNCTION searchcar_menu(user_data, data_carlist, space_cars)
        ENDIF
        
        IF (choice == '3') THEN
            CALL FUNCTION bookcar_interface(user_data, data_clients, data_carlist, data_transactions)
        ENDIF
        
        IF (choice == '4') THEN
            RETURN
        ENDIF
    ENDDO




FUNCTION view_allcars(user_data, data_carlist, space_cars)
    DOWHILE(1)
        DECLARE menu = ["Sort the List", "Return"]
        DOWHILE(1)
            CALL FUNCTION general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF (choice == '1' OR choice == '2') THEN
                BREAK
            ENDIF
        ENDDO

    
        IF (choice == '1') THEN
            CALL FUNCTION sortcar_menu(user_data, data_carlist, space_cars)
            
        ELSE IF (choice == '2') THEN
            RETURN
        ENDIF
    ENDDO



FUNCTION sortcar_menu(user_data, data_carlist, space_cars)
    DOWHILE(1)
        DECLARE menu = ["Car ID", "Car Types", "Car Brand", "Model Year", "Price per Hour", "Passenger Capacity","Weight Load","Return"]
        title = user_data[2] + ", you can sort the list here"
    
        DOWHILE(1)
            CALL FUNCTION print_title(title)
            CALL FUNCTION general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF (choice == '1' OR choice =='2' OR choice == '3' OR choice == '4' OR choice == '5' OR choice == '6' OR choice == '7' OR choice == '8') THEN
                BREAK
            ENDIF
        ENDDO
    
        IF (choice == '8') THEN
            RETURN
        ENDIF
        
        IF (choice == '1') THEN
            header = "Car ID"
            sequence = CALL FUNCTION sort_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '2') THEN
            header = "Car Types"
            sequence = CALL FUNCTION sort_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '3') THEN
            header = "Car Brand"
            sequence = CALL FUNCTION sort_menu(header, data_carlist, 2)
        ENDIF

    
        IF (choice == '4') THEN
            header = "Model Year"
            sequence = CALL FUNCTION sort_menu(header, data_carlist, 2)
        ENDIF
    
        IF (choice == '5') THEN
            header = "Price per Hour"
            sequence = CALL FUNCTION sort_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '6') THEN
            header = "Passenger Capacity"
            sequence = CALL FUNCTION sort_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '7') THEN
            header = "Weight Load"
            sequence = CALL FUNCTION sort_menu(header, data_carlist, 2)
        ENDIF
    
        
        CALL FUNCTION print_sorttable(data_carlist, 4, sequence, space_cars)
        PRINT("")
    ENDDO

        

FUNCTION sub_sort_menu(header, data, mode)
    DECLARE sub_menu = ["Ascending", "Descending"]
    title = "You have chosen " + header + ": "
    DOWHILE(1)
        CALL FUNCTION print_title(title)
        CALL FUNCTION general_menu(sub_menu)
        PRINT("Please Select: ")
        READ choice
        IF (choice == '1' OR choice == '2') THEN
            BREAK
        ENDIF
    ENDDO

        
    IF (choice == '1') THEN
        sequence = CALL FUNCTION sort_data(data, header, 1, mode)
    
    ELSE IF (choice == '2') THEN
        sequence = CALL FUNCTION sort_data(data, header, 0, mode)
    ENDIF
        
    RETURN sequence

           
FUNCTION searchcar_menu(user_data, data_carlist, space_cars)
    DOWHILE(1)
        DECLARE menu = ["Car ID", "Car Types", "Car Brand", "Car Model", "Passenger Capacity","Weight Load","Return"]
        title = user_data[2] + ", you can search a car here"
        DECLARE sequence = []
    
        DOWHILE(1)
            CALL FUNCTION print_title(title)
            CALL FUNCTION general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF (choice == '1' OR choice =='2' OR choice == '3' OR choice == '4' OR choice == '5' OR choice == '6' OR choice == '7') THEN
                BREAK   
            ENDIF
        ENDDO
        
        IF (choice == '1') THEN
            header = "Car ID"
            sequence = CALL FUNCTION search_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '2') THEN
            header = "Car Types"
            sequence = CALL FUNCTION search_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '3') THEN
            header = "Car Brand"
            sequence = CALL FUNCTION search_menu(header, data_carlist, 2)
        ENDIF
    
        IF (choice == '4') THEN
            header = "Car Model"
            sequence = CALL FUNCTION search_menu(header, data_carlist, 2)
        ENDIF
    
        IF (choice == '5') THEN
            header = "Passenger Capacity"
            sequence = CALL FUNCTION search_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '6') THEN
            header = "Weight Load"
            sequence = CALL FUNCTION search_menu(header, data_carlist, 2)
        ENDIF
        
        IF (choice == '7') THEN
            RETURN
        ENDIF
        
        
        CALL FUNCTION print_sorttable(data_carlist, 4, sequence, space_cars)
        PRINT("")
    ENDDO

    

FUNCTION sub_search_menu(header, data, mode)
    title = "You have chosen " + header + ": "     
    
    CALL FUNCTION print_title(title)
    PRINT("Please enter your keyword: ")
    READ keyword
    PRINT("")
    sequence = CALL FUNCTION search_data(data, keyword, header, mode)
    
    RETURN sequence



FUNCTION view_indhistory(user_data,data_transactions,space_transactions)
    title = user_data[2] + ", view your rental history here"
    CALL FUNCTION print_table(data_transactions, 5, space_transactions, user_data[0])
    PRINT("")
    DECLARE menu = ["Return"]
    DOWHILE(1)
        CALL FUNCTION general_menu(menu)
        PRINT("Please Select: ")
        READ choice
        IF (choice == '1') THEN
            BREAK
        ENDIF
    ENDDO
    
    IF (choice == '1') THEN
        RETURN
    ENDIF

    
FUNCTION update_password(user_data, data_clients, login_index, space_clients)
    title = user_data[2] + ", change your password here."
    DECLARE menu = ["Change My Password", "Return"]
    DOWHILE(1)
        CALL FUNCTION general_menu(menu)
        PRINT("Please Select: ")
        READ choice
        IF (choice == '1' OR choice == '2') THEN
            BREAK
        ENDIF
    ENDDO
    
    IF (choice == '2') THEN
        RETURN
    ENDIF
    
    i = 0

    DOWHILE(i < 3)
        PRINT("Please enter your old password: ")
        READ old_password

        hash_object = hashlib.md5(old_password.encode())
        md5_hash = hash_object.hexdigest()
        old_password = md5_hash
        IF (old_password == user_data[3]) THEN
            BREAK
        
        ELSE
            PRINT(str(3-i-1) + " attempts are left.")
        ENDIF
        i = i + 1
        PRINT("")
    ENDDO

    IF (i == 3) THEN
        RETURN
    ENDIF
        

    new_password = CALL FUNCTION validation_length(space_clients[3])
    hash_object = hashlib.md5(new_password.encode())
    md5_hash = hash_object.hexdigest()
    new_password = md5_hash
    user_data[3] = new_password
    data_clients[login_index] = user_data
    
    WITH OPEN("./data/clients.txt",  mode = 'w') AS clients_file:
        LOOP line IN data_clients:
            temp = ",".join(line)
            clients_file.write(temp + '\n')
            NEXT line
        ENDLOOP
    
    RETURN


       
FUNCTION bookcar_interface(user_data, data_clients, data_carlist, data_transactions)
    DOWHILE(1)
        title = user_data[2] + ", you can book a car here"
        DECLARE menu = ["Book with Car ID", "Return"]
        DOWHILE(1)
            CALL FUNCTION print_title(title)
            CALL FUNCTION general_menu(menu)
            PRINT("Please select: ")
            READ choice
            IF (choice == '1' OR choice == '2') THEN
                BREAK
            ENDIF
        ENDDO

        IF (choice == '1') THEN
            CALL FUNCTION bookcar_menu(user_data, data_clients, data_carlist, data_transactions)
        ENDIF
    
        IF (choice == '2') THEN
            RETURN
        ENDIF
    ENDDO



FUNCTION select_date(header, user_data)
    title = user_data[2] + ", select your time here"
    i = 0
    DOWHILE(1)
        PRINT(header)
        PRINT("Please enter date IN DD-MM-YYYY")
        PRINT("Date: ")
        READ temp
        TRY
            datetime.datetime.strptime(temp, "%d-%m-%Y")
            BREAK
        EXCEPT ValueError
             PRINT("Error! Incorrect date format.")
             i = i + 1
        IF (i > 4) THEN
            DECLARE menu = ["Continue", "Return"]
            DOWHILE(1)
                CALL FUNCTION general_menu(menu)
                PRINT("Please Select: ")
                READ choice
                IF (choice == '1' OR choice == '2') THEN
                    BREAK
                ENDIF
            ENDDO
            IF (choice == '1') THEN
                RETURN 1
            ENDIF
            IF (choice == '2') THEN
                RETURN 2
            ENDIF
        ENDIF
    ENDDO

    RETURN temp

        
FUNCTION select_time(title)
    i = 0
    DOWHILE(1)
        PRINT(title)
        PRINT("Please enter time IN HH:MM")
        PRINT("Time: ")
        READ temp
        TRY
            datetime.datetime.strptime(temp, "%H:%M")
            BREAK
        EXCEPT ValueError
             PRINT("Error! Incorrect time format.")
             i = i + 1
               
        IF (i > 4) THEN
            DECLARE menu = ["Continue", "Return"]
            DOWHILE(1)
                CALL FUNCTION general_menu(menu)
                PRINT("Please Select: ")
                READ choice
                IF (choice == '1' OR choice == '2') THEN
                    BREAK
                ENDIF
            ENDDO
            IF (choice == '1') THEN
                RETURN 1
            ENDIF
            IF (choice == '2') THEN
                RETURN 2
            ENDIF
        ENDIF
    ENDDO
            
    RETURN temp
    




FUNCTION bookcar_menu(user_data, data_clients, data_carlist, data_transactions)
    DECLARE data = []
    DECLARE time = []
    index = -2
    sum = 0
    k = 0
    DOWHILE(1)
        PRINT("Please input the car ID: ")
        READ car_id
        

        LOOP i FROM 0 TO <range(len(data_carlist)) STEP +1
            IF (car_id == data_carlist[i][0]) THEN
                index = i
                BREAK
            ENDIF
            NEXT i
        ENDLOOP
        
        IF (index == i) THEN
            BREAK
        ENDIF
        PRINT("Car ID doesn't exists!")
        k = k + 1

        IF (k > 4) THEN
            DECLARE menu = ["Continue","Return"]
            DOWHILE(1)
                CALL FUNCTION general_menu(menu)
                PRINT("Please Select: ")
                READ choice
                IF (choice == '1' OR choice == '2') THEN
                    BREAK
                ENDIF
            ENDDO
            
            IF (choice == '1') THEN
                CALL FUNCTION bookcar_menu(user_data, data_clients, data_carlist, data_transactions)
            ENDIF
                
            IF (choice == '2') THEN
                RETURN
            ENDIF

            RETURN
        
        ENDIF
    ENDDO
            
        
    APPEND user_data[0] TO data
    APPEND user_data[2] TO data
    LOOP i FROM 0 TO <range(4) STEP +1
        APPEND data_carlist[index][i] TO data
        NEXT i
    ENDLOOP
    APPEND data_carlist[index][9] TO data
    
    DOWHILE(1):   
        DOWHILE(1)
            from_date = select_date("From: ", user_data)
            PRINT("")
            IF (from_date == 1) THEN
                pass
            ELSE IF (from_date == 2) THEN
                RETURN
            ELSE
                BREAK
            ENDIF
        ENDDO
    

    
        DOWHILE(1)
            from_time = select_time("From: ")
            PRINT("")
            IF (from_time == 1) THEN
                pass
            ELSE IF (from_time == 2) THEN
                RETURN
            ELSE
                BREAK
            ENDIF
        ENDDO

    
        DOWHILE(1)
            to_date = select_date("To: ", user_data)
            PRINT("")
            IF (to_date == 1) THEN
                pass
            ELSE IF (to_date == 2) THEN
                RETURN
            ELSE
                BREAK
            ENDIF
        ENDDO
    

    
        DOWHILE(1)
            to_time = select_time("To: ")
            PRINT("")
            IF (to_time == 1) THEN
                pass
            ELSE IF (to_time == 2) THEN
                RETURN
            ELSE
                BREAK
            ENDIF
        ENDDO
    

        from_datetime = datetime.datetime.strptime(from_date + " " + from_time, "%d-%m-%Y %H:%M")
        to_datetime = datetime.datetime.strptime(to_date + " " + to_time, "%d-%m-%Y %H:%M")
        from_date = from_datetime.strftime("%d-%m-%Y")
        from_time = from_datetime.strftime("%H:%M:%S")
        to_date = to_datetime.strftime("%d-%m-%Y")
        to_time = to_datetime.strftime("%H:%M:%S")
        
        now_datetime = datetime.datetime.now()
        now_date = now_datetime.strftime("%d-%m-%Y")
        now_time = now_datetime.strftime("%H:%M:%S")



        

        IF (from_datetime < to_datetime AND now_datetime < from_datetime) THEN
            result = CALL FUNCTION quantity(car_id, data_transactions, from_datetime, to_datetime, data_carlist)
            IF (result == 0) THEN
                PRINT("This model of car have all been rent out.")
                PRINT("Please try again")
                RETURN
            ENDIF
            
            total_hours = to_datetime - from_datetime

            total_hours = round(total_hours.total_seconds() / 3600, 2)
            
            total_price = round(total_hours * int(data[6]), 2)
            

            IF (user_data[1] == "VIP") THEN
                temp = total_price
                PRINT("We dected you are a VIP member, you will get a 10% discount")
                total_price = round(total_price * 0.9, 2)
                PRINT("RM" + str(temp) + " * 90% = " + "RM" + str(total_price))
            ENDIF
            
            voucher = 0

            IF (int(user_data[-1]) > 100) THEN
                
                DOWHILE(1)
                    PRINT("Points currently: " + str(user_data[-1]))
                    PRINT("100 points = RM5 voucher")
                    PRINT("The rebate will automatically be deducted in your transactions")
                    PRINT("If you cancel the current payment, no points will be deducted")
                    PRINT("")
                    TRY
                        PROMPT "How many RM5 vouchers do you want to exchange? "
                        GET count AS INTEGER
                    EXCEPT ValueError
                        PRINT("Error input")
                        CONTINUE
                    IF ((int(user_data[-1])/100) >= count) THEN
                        PRINT("Eligible. Do you want to exchange " + str(count) + " RM5 voucher ?")
                        DOWHILE(1)
                            DECLARE menu = ["Confirm", "Return"]
                            CALL FUNCTION general_menu(menu)
                            PRINT("Please select: ")
                            READ choice
                            IF (choice == '1' OR choice == '2') THEN
                                BREAK
                            ENDIF
                        ENDDO
                        IF (choice == '1') THEN
                            PRINT("You have successfully exchange " + str(count) + " RM5 vouchers")
                            voucher = count
                            temp = total_price
                            total_price = total_price - count * 5
                            PRINT("RM" + str(temp) + " - " + "RM" + str(count * 5) + " = RM" + str(total_price))
                        ENDIF
                        
                        IF (choice == '2') THEN
                            PRINT("Exchange has been cancelled.")
                        ENDIF
                        
                        BREAK
                    ELSE
                        PRINT("Your points are not enough to exchange")
                        CONTINUE
                    ENDIF
                ENDDO
            ENDIF


            APPEND from_date TO data
            APPEND from_time TO data
            APPEND to_date TO data
            APPEND to_time TO data
            APPEND now_date TO data
            APPEND now_time TO data
            APPEND str(total_hours) TO data
            APPEND str(total_price) TO data
            booking_id = int(data_transactions[-1][-4]) + 1
            APPEND str(booking_id) TO data
            APPEND "Rented" TO data
            APPEND "0" TO data
            APPEND "-" TO data
            choice = CALL FUNCTION booking(data_transactions[0], data)
            

            IF (choice == 1) THEN
                
                APPEND data TO data_transactions
                WITH OPEN("./data/transactions.txt",  mode = 'w') AS transactions_file:
                    LOOP line IN data_transactions:
                        temp = ",".join(line)
                        transactions_file.write(temp + '\n')
                        NEXT line
                    ENDLOOP

                ASSIGN STRING int(user_data[-1]) - int(voucher) * 100 TO user_data[-1]
                ASSIGN STRING float(user_data[-2]) + total_price TO user_data[-2]
                ASSIGN STRING int(total_price) + int(user_data[-1]) TO user_data[-1]
                
                IF (int(float(user_data[-2])) > 2000 AND user_data[1] == "Normal") THEN
                    CALL FUNCTION print_title("You have become our VIP member")
                    PRINT("Congratulations " + str(user_data[2] +",\nYou will get 10% discount for every payment"))
                    user_data[1] = "VIP"
                    PRINT("")
                ENDIF
                k = 0 
                LOOP i IN user_data:
                    ASSIGN STRING i TO user_data[k]
                    NEXT i
                ENDLOOP
                    
                LOOP i FROM 0 TO <range(len(data_clients)) STEP +1
                    IF (user_data[0] == data_clients[i][0]) THEN
                        data_clients[i] = user_data
                        BREAK
                    ENDIF
                    NEXT i
                ENDLOOP
                    
                WITH OPEN("./data/clients.txt", mode = "w") AS clients_file:
                    LOOP line IN data_clients:
                        temp = ",".join(line)
                        clients_file.write(temp + '\n')
                        NEXT line
                    ENDLOOP
            ENDIF
                    
            IF (choice == 2) THEN
                RETURN
            ENDIF
            BREAK
        
        
        ELSE
            PRINT("You can only book a date for a period in the future.")
        ENDIF
    ENDDO
    RETURN

            

FUNCTION confirm_booking(headers, data)
    title = "Booking Details"
    PRINT("")
    
    DECLARE menu = ["Confirm Booking", "Return"]
    DOWHILE(1)
        CALL FUNCTION print_title(title)
        PRINT("")
        
        LOOP i FROM 0 TO <range(16) STEP +1
            PRINT(headers[i] + ": " + str(data[i]))
            NEXT i
        ENDLOOP
            
        PRINT("")
        PRINT("The total amount to pay is: RM" + data[14])
            
        PRINT("")
        CALL FUNCTION general_menu(menu)
        PRINT("Please Select: ")
        READ choice
        IF (choice == '1' OR choice == '2') THEN
            BREAK
        ENDIF
    ENDDO
            
    IF (choice == '1') THEN
        PRINT("Payment is successful!")
        LOOP remaining FROM 5 TO > -1 STEP  -1
            sys.stdout.write("\r")
            sys.stdout.write("Will be directed IN {:2d}......".format(remaining)) 
            sys.stdout.flush()
            CALL FUNCTION sleep(1)
            NEXT remaining
        ENDLOOP
        sys.stdout.write("\n")

        RETURN 1
    ENDIF
        
    IF (choice == '2') THEN
        RETURN 2
    ENDIF



FUNCTION compare_quantity(car_id, data_transactions, from_datetime, to_datetime, data_carlist)
    count = 0

    LOOP i FROM 0 TO <range(len(data_transactions)) STEP +1
        IF (car_id == data_transactions[i][2]) THEN
            origin_fromtime = datetime.datetime.strptime(data_transactions[i][7] + " " + data_transactions[i][8], "%d-%m-%Y %H:%M:%S")
            origin_totime = datetime.datetime.strptime(data_transactions[i][9] + " " + data_transactions[i][10], "%d-%m-%Y %H:%M:%S")
            
            IF ((origin_fromtime <= from_datetime <= origin_totime) OR (origin_fromtime <= to_datetime <= origin_totime) OR (from_datetime <= origin_fromtime <= to_datetime) OR (from_datetime <= origin_totime <= to_datetime)) THEN
                count += 1
            ENDIF
        ENDIF
        NEXT i
    ENDLOOP
    

    LOOP i FROM 0 TO <range(len(data_carlist)) STEP +1
        IF (data_carlist[i][0] == car_id) THEN
            available_quantity = data_carlist[i][6]
            BREAK
        ENDIF
        NEXT i
    ENDLOOP
    

    IF (int(available_quantity) == count) THEN

        RETURN 0
    
    ELSE
        RETURN 1
    
    ENDIF

            
        

        
        
        
            
    
    
       
    
        
    
    
    
        
        

    
    
    
    
    
        
        
    

        

    

    

        
        
        
            
    
    

          
    
    
    
    
    
    