import csv
import datetime
import hashlib
import time 
import sys
import clients

        
#First menu -startup menu
startup_menu(main_title)
    PRINT_title(main_title)
    menu = ["Registered", "Unregistered","Exit"]
    general_menu(menu)
    PRINT("Please Select: ")
    READ choice
    
    RETURN choice
END
    

#login menu for existing users, returning username and password for checking later
login_menu(main_title)
    lists = []
    PRINT_title(main_title)
    PRINT("Username/ID: ")
    INPUT username
    PRINT("   Password: ")
    INPUT password
    APPEND username TO lists
    APPEND password TO lists
    
    RETURN lists
END

#Reading datas from file and storing it in an array
input_dataclients()
    data = []
    WITH OPEN ("./data/clients.csv") AS csv_file:
        read = csv.reader(csv_file, delimiter = ',')
        FOR row IN read
            APPEND row TO data
            
    RETURN data
END
        

#Reading datas from file and storing it in an array
input_datacars()
    data_cars = []
    WITH OPEN("./data/cars_lists.csv") AS csv_file
        read = csv.reader(csv_file, delimiter = ',')
        FOR row IN read
            APPEND row TO data_cars
        
    RETURN data_cars
END

#Reading datas from file and storing it in an array
input_datatransactions()
    data = []
    WITH OPEN("./data/transactions.csv") AS csv_file
        read = csv.reader(csv_file, delimiter = ',')
        FOR row IN read
            APPEND row TO data
        
    RETURN data 
END
    
#Check password if it is correct
check_password(data, username, password)
    rows = LEN(data)
    #MD5 hash encoding
    hash_object = hashlib.md5(password.encode())
    md5_hash = hash_object.hexdigest()
    password = md5_hash
    #loop to see if it matches username/id and password 
    LOOP i FROM 1 TO <rows step +1
        IF(username == data[i][0])THEN
            IF(password == data[i][3])THEN
                login_index = i
                RETURN login_index
            ENDIF
        ENDIF
        IF(username == data[i][2])THEN
            IF(password == data[i][3])THEN
                login_index = i
                RETURN login_index
            ENDIF
        ENDIF
        NEXT i
    ENDLOOP
        
    RETURN 0
END
    
    
#check Username/ID if it is correct
check_usernameID(data, username)
    rows = LEN(data)
    LOOP i FROM 1 TO <rows step +1
        #Check ID
        IF(username == data[i][0])THEN
            RETURN 1
        ENDIF
        #Check username
        IF(username == data[i][2])THEN
            RETURN 1
        ENDIF
        NEXT i

    ENDLOOP
    RETURN 0 
END

#print all major titles for super car rental system
PRINT_title(title)
    PRINT("================================================================")
    PRINT(" " * int((64-LEN(title))/2) + title)
    PRINT("================================================================")

#Widely use function, input list, and then this function will generate a list accordingly with numbers 1-xxx,2-xxx,3-xxx
general_menu(list)
    length = LEN(list)
    LOOP i FROM 0 TO <length step +1
        PRINT(str(i+1), "-", list[i])
        NEXT i
    
    ENDLOOP
        
    PRINT("\n")
END

#The login interface that checks and hints of a user login in
login_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
    
    i = 0 
    DOWHILE(True)
        login_details = login_menu(main_title)
        username_key = check_usernameID(data_clients, login_details[0])
        password_key = check_password(data_clients, login_details[0], login_details[1])
    
        IF(username_key == 1 AND password_key >= 1)THEN
            PRINT("You have successfully login!")
            BREAK
    
        ELSE IF(username_key == 1 AND password_key == 0)
            PRINT("Wrong password. Failed to login.")

        ELSE
            PRINT("Username does not exist. Failed to login.")
        
        ENDIF
        i = i + 1
        IF(i > 4)THEN
            BREAK
        ENDIF
    ENDDO
    #If tried for 5 times, this will appear and offer a route to escape the current page and return to startup_interface
    IF(i > 4)THEN
        menu = ["Continue","Return"]
            
        DOWHILE(True)
            general_menu(menu)
            choice = input("Please Select: ")
            IF(choice == '1' OR choice == '2')THEN
                BREAK
            ENDIF
        ENDDO

        #If continue, recursion
        IF(choice == '1')THEN
            password_key = login_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
            RETURN password_key
        ENDIF  

        IF(choice == '2')THEN
            login_index = startup_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
            RETURN login_index
        ENDIF   
    ENDIF

    RETURN password_key
END
                        
                    
#Interface for the unregistered to register as clients
unregistered_interface(data_clients, data_carlist, space_cars,space_clients)
    title = "Guest, Welcome to Super Car Rental System"
    menu = ["Register", "View Available Cars", "Return"]
    DOWHILE(True)
        PRINT_title(title)
        general_menu(menu)
        choice = input("Please Select: ")
        IF(choice == '1' OR choice == '2' OR choice == '3')THEN
            BREAK
        ENDIF
    ENDDO
    IF(choice == '1')THEN
        register_interface(data_clients, space_clients)
    ENDIF

    IF(choice == '2')THEN
        PRINT_table(data_carlist, 6, space_cars)
        PRINT("")
        DOWHILE(True)
            menu = ["Return"]
            general_menu(menu)
            choice = input("Please Select: ")
            IF(choice == '1')THEN
                BREAK
            ENDIF
        ENDDO
        IF(choice == '1')THEN
            RETURN
        ENDIF
    ENDIF
    IF(choice == '3')THEN
        RETURN
    ENDIF
END

# register interface is for the unregister clients
register_interface(data_clients, space_clients)
    PRINT_title("You can register here")
    prev_id = data_clients[-1][0]
   
    DOWHILE(True)
        data = []
        id = int(prev_id) + 1
        APPEND id TO data
        APPEND "Normal" TO data
        PRINT("Plase enter your Username")
        name = validation_length(space_clients[2])
        PRINT("")
        APPEND name TO data
        DOWHILE(True)
            PRINT("Plase enter your password")
            password_1 = validation_length(space_clients[3])
            PRINT("")
            PRINT("Please confirm your password")
            password_2 = validation_length(space_clients[3])
            IF(password_1 == password_2)THEN
                hash_object = hashlib.md5(password_1.encode())
                md5_hash = hash_object.hexdigest()
                password_1 = md5_hash
                APPEND password_1 TO data
                BREAK
            ELSE
                PRINT("The password you enter are not the same. Please try again")
                PRINT("")
            ENDIF
        ENDDO
        
        PRINT("")
        
        PRINT("Please enter your date of birth: ")
        birth_date = validation_date()
        PRINT("")
        APPEND birth_date TO data
        
        PRINT("Please enter your license: ")
        license = validation_length(space_clients[5])
        PRINT("")
        APPEND license TO data
        
        PRINT("Please enter your phone number: ")
        phone = validation_number(space_clients[6])
        PRINT("")
        APPEND phone TO data
        
        PRINT("Please enter your email: ")
        email = validation_email(space_clients[7])
        PRINT("")
        APPEND email TO data
        
        PRINT("Please enter your credit/debit card number: ")
        card = validation_number(12)
        PRINT("")
        APPEND card TO data
        APPEND 0 TO data
        APPEND 0 TO data
        
        
        PRINT_title("Confirm Registeration Details")
        k = 0
        FOR i IN data:
            IF(k == 3)THEN
                k += 1
                CONTINUE
            ENDIF  

            PRINT(data_clients[0][k] + ": " + str(i))
            k += 1
            
            
        menu = ["Confirm", "Return"]
        DOWHILE(True)
            general_menu(menu)
            choice = input("Please Select: ")
            IF(choice == '1' OR choice == '2')THEN
                BREAK
            ENDIF
        ENDDO

        IF(choice == '1')THEN
            APPEND data TO data_clients
            #print(data)
            with open("./data/clients.csv", mode = 'w', newline = "") as clients_file:
                write = csv.writer(clients_file)
                write.writerows(data_clients)
        
            PRINT_title("Registeration information has successfuly recorded.")
            LOOP remaining FROM 5 TO >-1 STEP -1
                sys.stdout.write("\r")
                sys.stdout.write("Will be directed in {:2d}......".format(remaining)) 
                sys.stdout.flush()
                time.sleep(1)
                NEXT remaining
            ENDLOOP
            sys.stdout.write("\n")
            RETURN
        ENDIF    
        
        
        IF(choice == '2')THEN
            RETURN                
        ENDIF
        
    ENDDO
END
            
            
    
#It is a menu to direct into login/unregister and exit
startup_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
    
    DOWHILE(True)
        DOWHILE(True)
            choice = startup_menu(main_title)
            IF(choice == '1' OR choice == '2' OR choice == '3' OR choice == '4')THEN
                BREAK  
            ENDIF         
        ENDDO
        IF(choice == '1')THEN
            login_index = login_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
            RETURN login_index
    
        ELSE IF(choice == '2')
            unregistered_interface(data_clients, data_carlist, space_cars, space_clients)

        ELSE IF(choice == '3')
            LOOP remaining FROM 5 TO >-1 STEP -1
                sys.stdout.write("\r")
                sys.stdout.write("System will exit in {:2d}.............".format(remaining)) 
                sys.stdout.flush()
                time.sleep(1)
                NEXT remaining
            ENDLOOP
        
            EXIT()
        ENDIF
    ENDDO
END


#Use to print all the tables
PRINT_table(data, mode, space, login_name = "")
    rows = LEN(data)
    start = 1
    IF(mode == 1)THEN
        #mode 1: admin view clients table(all columns can be viewed)
        columns = 11
        start = 2
        blanks = 180
        
    ELSE IF(mode == 2)
        #mode 2: admin view cars table(all columns can be viewed)
        columns = 13
        blanks = 183
        
    ELSE IF(mode == 3 OR mode == 5)
        #mode 3: admin view transactions table(all columns can be viewed)
        #mode 5: client view transactions table(view their own transactions only)
        columns = 19
        blanks = 302
        
    ELSE IF(mode == 4)
        #mode 4: client view cars table(four columns of quantity and columis not included)
        columns = 13
        blanks = 143
    
    ELSE IF(mode == 6)
        #mode 6: unregistered client view car table(Car ID, Car type, Car Brand, Car Model)
        columns = 4
        blanks = 61
    
    ELSE IF(mode == 7 OR mode == 8)
        #mode 7: admin wanted to filter transactions details using specific client ID 
        #mode 8: admin wanted to filter transactions details using specific client name 
        columns = 19
        blanks = 302
    
    ENDIF

    #Section for printing headers
    k = 0 
    FOR i IN data[0]:
        #skip four columns of quantity
        IF(mode == 4 AND (i == "Total Quantity" OR i == "Available" OR i == "Unavailable" OR i == "In Service" ))THEN
            k = k + 1
            CONTINUE
        ENDIF
        #skip the fourth column till the last column
        IF(mode == 6 AND (k >= 4 AND k <= 12))THEN
            k = k + 1
            CONTINUE
        ENDIF
        #skip password column
        IF(mode == 1 AND k == 3)THEN
            k = k + 1
            CONTINUE
        ENDIF

        PRINT(i + " " * (int(space[k]) - int(LEN(i))) + " | ", end = "")
        k = k + 1
    
    #printing the "-----------" line seperator between headers and data    
    PRINT("")
    PRINT("-" * blanks)
    
    
    #printing the data
    LOOP i FROM start TO<rows STEP +1     #user variable start to skip clients.csv first row of admin data
        LOOP k FROM 0 TO <columns STEP +1 
            
        #Skipping columns
            #skip four columns of quantity
            IF(mode == 4 AND (k == 5 OR k == 6 OR k ==7 OR k == 8))THEN
                CONTINUE
            ENDIF
            
            #skip transactions for others
            IF(mode == 5 AND data[i][0] != login_name)THEN
                CONTINUE
            ENDIF
            
            #skip transactions for other client ID
            IF(mode == 7 AND data[i][0] != login_name)THEN
                CONTINUE
            ENDIF
            
            #skip transaction for other client names
            IF(mode == 8 AND data[i][1] != login_name)THEN
                CONTINUE
            ENDIF
            
            #skip password column for admin
            IF(mode == 1 AND k == 3)THEN
                CONTINU
            ENDIF

            PRINT(str(data[i][k]) + " " * (int(space[k]) - int(LEN(str(data[i][k])))) + " | ", end = "")

            NEXT k
        ENDLOOP
        
        #skipping rows
        IF((mode == 5 AND data[i][0] != login_name) OR (mode == 7 AND data[i][0] != login_name) OR (mode == 8 AND data[i][1] != login_name))THEN
            PASS
        ELSE
            PRINT("")
        ENDIF

        NEXT i
    ENDLOOP
END

#print tables according to a given sequence
PRINT_sorttable(data, mode, sequence, space)
    
    IF(mode == 1)THEN
        #mode 1: admin sort list of clients
        columns = 11
        blanks = 180
        
    ELSE IF(mode == 2)
        #mode 2: admin sort list of cars(include all columns)
        columns = 13
        blanks = 180
        
    ELSE IF(mode == 3)
        #mode 3: admin filter certain dates of transactions
        columns = 19
        blanks = 302
        
    ELSE IF(mode == 4)
        #mode 4: client sort list of cars(exclude four columns of quantity)
        columns = 13
        blanks = 143
    ENDIF
    
    #insert headers row inside the sequence               
    sequence.insert(0, 0)
    
    FOR i IN sequence:
        LOOP k FROM 0 TO <columns STEP +1 
            #skipping columns
            IF(mode == 4 AND (k == 5 OR k == 6 OR k ==7 OR k == 8 ))THEN
                CONTINUE
            ENDIF

            IF(mode == 1 AND k == 3)THEN
                CONTINUE
            ENDIF
            
                
            PRINT(data[i][k] + " " * (int(space[k]) - int(LEN(data[i][k]))) + " | ", end = "")

            NEXT k
        ENDLOOP       
        IF(i == 0)THEN
            PRINT("")
            PRINT("-" * blanks, end = "")
        ENDIF

        PRINT("")
END

#sorting data according to target, with ascending(order == 1) & descending(order == 0)           
sort_data(data, target, order, mode)
    #skipping headers line in data
    start = 1
    count = 1    

    #mode 1: skipping the header and admin line in clients.csv
    #mode 2: mainly for car lists
    IF(mode == 1)THEN
        start = 2
        count = 2
    ENDIF
    sample = []
    index = 0
    rows = LEN(data)
    #finding certain column equals to target
    FOR i IN data[0]:
        IF(i == target)THEN
            BREAK
        ENDIF
        index = index + 1
     
     #append the whole column(target column) inside sample
    LOOP i FROM start TO <rows STEP +1
        APPEND data[i][index] TO sample
        NEXT i 
    ENDLOOP
        
    len_sample = LEN(sample)
    
    #giving values to sequence accordance to the row number
    sequence = [*range(start, LEN_sample+count, 1)]
    
    #if the values in the column, turns out to be numbers, it must be converted to integers to compare the sizes
    IF(mode == 2 AND ((index >=5 AND index <=9) OR index == 12 OR index == 13))THEN
        LOOP i FROM start TO <len_sample STEP +1
            sample[i] = int(sample[i])
            NEXT i
        ENDLOOP
    ENDIF    
    #Changing sequence and sample at the same time, so when it's done we know the ascending/descending sequence with the variable 'sequence'
    #Descending
    IF(order == 0)THEN
        LOOP i FROM start TO < len_sample-1 STEP +1
            LOOP k FROM start TO <len_sample-i-1 STEP +1
                IF (sample[k] < sample[k+1])THEN
                    sample[k], sample[k+1] = sample[k+1], sample[k]
                    sequence[k], sequence[k+1] = sequence[k+1], sequence[k]
                ENDIF
                NEXT k
            ENDLOOP
            NEXT i 
        ENDLOOP
    
    #Ascending           
    ELSE IF(order == 1)
        LOOP i FROM start TO <len_sample-1 STEP +1
            LOOP k FROM start TO <len_sample-i-1 STEP +1
                IF (sample[k] > sample[k+1])THEN
                    sample[k], sample[k+1] = sample[k+1], sample[k]
                    sequence[k], sequence[k+1] = sequence[k+1], sequence[k]

                ENDIF
                NEXT k 
            ENDLOOP
            NEXT i
        ENDLOOP
    
    #return the sequence of how it sorts and later printed via print_sorttabble           
    RETURN sequence
END

#searching "keyword" in "data" list of "attribute" column
search_data(data, keyword, attribute, mode)
    start = 1
    #skipping the admin line if want to search for clients
    IF(mode == 1)THEN
        start = 2
    ENDIF
    sequence = []
    sample = []
    rows = LEN(data)
    #convert keyword to lower case so the search is not case sensitive
    keyword = keyword.lower()
    
    #fingding the respective index of attribute
    k = 0
    FOR i IN data[0]:
        IF attribute == i THEN
            index = k
        ENDIF
        k = k + 1        
    
    #append everything in the attribute column into sample         
    LOOP i FROM start TO <rows STEP +1
        APPEND data[i][index] TO sample
        NEXT i
    ENDLOOP
        
    #turning every element in sample to lower case
    LOOP i FROM 0 TO <LEN(sample) STEP +1
        sample[i] = sample[i].lower()
        NEXT i
    ENDLOOP
    
    #checking if it matches with the sequence
    i = 0
    
    LOOP i FROM 0 TO <LEN(sample) STEP +1
        IF keywordINsample[i]THEN
            APPEND i TO sequence
        ENDIF
        NEXT i
    ENDLOOP
    

    
    #mode 1: everything have to add 2 to make the row number exact to how it shows in clients list    
    IF(mode == 1)THEN
        sequence = [x + 2 for xINsequence]
    #mode 2: add 1 to skip headers
    ELSE
         sequence = [x + 1 for xINsequence]
    #print(sequence)
    ENDIF
    RETURN sequence
END

validation_length(length)
    length = int(length)
    DOWHILE(True)
        temp = input(" ")
        IF(LEN(temp) <=length)THEN
            RETURN temp
        ELSE
            PRINT("You cannot exceed " + str(length) + " characters" )
            PRINT("")
        ENDIF
    ENDDO
END

validation_number(length)
    length = int(length)
    DOWHILE(True)
        temp = input(" ")
        
        IF temp.isdecimal() == True AND LEN(temp) <= Length THEN
            RETURN temp
        ELSE
            PRINT("You can only enter " + str(length) +" digit of numbers" )
            PRINT("")
        ENDIF
    ENDDO
END

validation_email(length)
    length = int(length)
    DOWHILE(True)
        temp = input(" ")
        
        IF "@"INtemp AND ".com"INtemp THEN
            BREAK
        ELSE
            PRINT("Email format not correct" )
            PRINT("")
        ENDIF
    ENDDO
            
    DOWHILE(True)
        IF LEN(temp) <= length THEN
            BREAK
        ELSE
            PRINT("You cannot exceed " + str(length) + " characters" )
            PRINT("")
            temp = input(" ")
        ENDIF
    
    ENDDO
    RETURN temp
END

validation_date()
    
    DOWHILE(True)
        PRINT("Please enter date in DD-MM-YYYY")
        temp = input(" ")
        TRY
            date = datetime.datetime.strptime(temp, "%d-%m-%Y")
            birth = date.strftime("%d-%m-%Y")

            RETURN birth
        
        EXCEPT ValueError:
            PRINT("Error! Incorrect date format")    
            PRINT("")
    ENDDO
END
            
validation_totalquantity(data_carlist, car_data, mode = 1)

    DOWHILE(True)
        PRINT("Total Quantity = Available + Unavailable + In Service")
        PRINT("You can only input upto 4 positive digits")
        PRINT("")
        TRY
            temp = int(input("What is the total quantity now? :"))
            IF temp < 0 THEN
                PRINT("You cannot enter negative digits")
                PRINT("Please enter again!")
                PRINT("")
                CONTINUE
            ENDIF
            
            IF LEN(str(temp)) > 4 THEN
                PRINT("You cannot exceed 4 digits")
            ENDIF
            
        EXCEPT ValueError:
            PRINT("You can only enter upto 4 positive integers. ")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        IF(mode == 2) THEN
            car_data = sub_total_quantity_menu2(temp, car_data)
            BREAK
        
            
        ELSE IF(temp > int(car_data[5]))
            car_data = sub_total_quantity_menu1(temp, car_data, 1)
            PRINT_title("This is the current record.")
            LOOP i FROM 0 TO <13 STEP +1
                PRINT(data_carlist[0][i] + ": " + str(car_data[i]))    
                NEXT i
            ENDLOOP
            BREAK
            
        ELSE IF(temp < int(car_data[5]))
            car_data = sub_total_quantity_menu1(temp, car_data, 0)
            PRINT_title("This is the current record.")
            LOOP i FROM 0 TO <13 STEP +1
                PRINT(data_carlist[0][i] + ": " + str(car_data[i]))    
                NEXT i
            ENDLOOP
            BREAK
        
        ELSE
            PRINT("Total Quantity is the same as before")
            PRINT("Do you want to alter quantity for each section? ")
            menu = ["Yes", "Return"]
            DOWHILE(True)
                general_menu(menu)
                choice = input("Please Select: ")
                IF(choice == '1' OR choice == '2')
                    BREAK
            ENDDO
            
            IF(choice == '1')
                car_data = sub_total_quantity_menu2(temp, car_data)
                PRINT_title("This is the current record.")
                LOOP i FROM 0 TO <13 STEP +1
                    PRINT(data_carlist[0][i] + ": " + str(car_data[i])) 
                    NEXT i
                ENDLOOP
            RETURN car_data  
        ENDIF 
              
    
       
    ENDDO
    RETURN car_data 
END        
            
            
#If total quantity is different than previous      
#order == 1, larger than previours; order ==0, smaller than previous   
sub_total_quantity_menu1(temp, car_data, order)
    count = abs(temp - int(car_data[5]))
    IF order == 1 THEN
        title = "added"
    ENDIF
    IF order == '2' THEN
        title = "deleted"
    ENDIF
    DOWHILE(True)
        PRINT("You have " + str(title) + " " + str(count) + " cars into the total quantity for car ID: " + str(car_data[0]))
        PRINT("Available + Unavailable + In Service = " + str(count))
        PRINT("Please enter the quantity for each section below: ")
        PRINT("")
        
        TRY
            num1 = int(input("Available  : ")) 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
            
        IF(LEN(str(num1)) <= 4 AND num1 >=0 AND num1 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE   
        ENDIF 
                
        TRY
            num2 = int(input("Unavailable: ")) 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num2)) <= 4 AND num2 >=0 AND num2 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE    
        ENDIF
                
        IF(num1 + num2 > count) THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF
                        
        TRY
            num3 = int(input("In Service : ")) 
            
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num3)) <= 4 AND num3 >=0 AND num3 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE      
        ENDIF 
                
        IF(num1 + num2 + num3 > count) THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF
        PRINT("")
        BREAK
    ENDDO
                
    DOWHILE(True)
        PRINT("Do you confirm the following changes: ")
        PRINT("Available     : " + str(num1))
        PRINT("Unavailable   : " + str(num2))
        PRINT("In Service    : " + str(num3))
                
        menu = ["Confirm", "Return"]
        general_menu(menu)
        choice = input("Please select: ")
        IF(choice == '1' OR choice == '2') THEN
            BREAK
        ENDIF
    ENDDO
                
    IF(choice == '1') THEN
        car_data[5] = temp
        car_data[6] = int(car_data[6]) + num1
        car_data[7] = int(car_data[7]) + num2
        car_data[8] = int(car_data[8]) + num3          
    ENDIF                
    RETURN car_data
END
                
#If total quantity is the same as previous
sub_total_quantity_menu2(temp, car_data)
    count = int(temp)
    DOWHILE(True)
        PRINT("Please reenter the quantity for 'Available', 'Unavailable', 'In Service'.")
        PRINT("Available + Unavailable + In Service = Total Quantity")
        PRINT("The total quantity now is: " + str(temp))
        
        TRY
            num1 = int(input("Available  : ")) 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
            
        IF(LEN(str(num1)) <= 4 AND num1 >=0 AND num1 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE    
        ENDIF        
        TRY
            num2 = int(input("Unavailable: ")) 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num2)) <= 4 AND num2 >=0 AND num2 <= count)THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE    
        ENDIF   

        IF(num1 + num2 > count)THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF           

        TRY
            num3 = int(input("In Service : ")) 
            
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num3)) <= 4 AND num3 >=0 AND num3 <= count)THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE       
        ENDIF

        IF(num1 + num2 + num3 > count)THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF
        PRINT("")
        BREAK
    ENDDO
                
    DOWHILE(True)
        PRINT("Do you confirm the following changes: ")
        PRINT("Total Quantity: " + str(temp))
        PRINT("Available     : " + str(num1))
        PRINT("Unavailable   : " + str(num2))
        PRINT("In Service    : " + str(num3))
                
        menu = ["Confirm", "Return"]
        general_menu(menu)
        choice = input("Please select: ")
        IF(choice == '1' OR choice == '2')THEN
            BREAK
        ENDIF
    ENDDO
                
    IF(choice == '1')THEN
        car_data[5] = temp
        car_data[6] = num1
        car_data[7] = num2
        car_data[8] = num3          
    ENDIF

    RETURN car_data
END

validation_cartypes()
    
    DOWHILE(True)
        PRINT("You can only enter: City, Electric, Prestige, Van, Truck")    
        PRINT("")
        temp = input("Please enter car type: ")
        temp.lower()
        IF temp == 'city' OR temp == 'electric' OR temp == 'prestige' OR temp == 'van' OR temp == 'truck' THEN:
            BREAK
        ENDIF    
    ENDDO        
    temp = temp[0].upper() + temp[1:LEN(temp)]
    RETURN temp 
END         

#Ensuring the temp return is capitalised in the first alphabet and small for the rest
validation_carnormal(target)
    
    temp = input("Please enter " + str(target) +": ")
    
    temp = temp[0].upper() + temp[1:LEN(temp)].lower()
    RETURN temp
END