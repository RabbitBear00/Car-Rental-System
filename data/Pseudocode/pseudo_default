IMPORT datetime
IMPORT hashlib
IMPORT time 
IMPORT sys
        

FUNCTION startup_menu(main_title)
    PRINT_title(main_title)
    DECLARE menu = ["Registered", "Unregistered","Exit"]
    general_menu(menu)
    PRINT("Please Select: ")
    READ choice
    
    RETURN choice

    


FUNCTION login_menu(main_title)
    DECLARE lists = []
    PRINT_title(main_title)
    PRINT("Username/ID: ")
    INPUT username
    PRINT("   Password: ")
    INPUT password
    APPEND username TO lists
    APPEND password TO lists
    
    RETURN lists



FUNCTION input_dataclients()
    DECLARE data = []
    WITH OPEN("./data/clients.txt") AS csv_file:
        LOOP line IN csv_file:
            temp = line.strip().split(",")
            data.append(temp)
        ENDLOOP    
    RETURN data

        


FUNCTION input_datacars()
    DECLARE data_cars = []
    WITH OPEN("./data/cars_lists.txt") AS csv_file:
        LOOP line IN csv_file:
            temp = line.strip().split(",")
            data_cars.append(temp)
        ENDLOOP
    RETURN data_cars



FUNCTION input_datatransactions()
    DECLARE data = []
    WITH OPEN("./data/transactions.txt") AS csv_file:
        LOOP line IN csv_file:
            temp = line.strip().split(",")
            data.append(temp)
        ENDLOOP
        
    RETURN data 

    

FUNCTION check_password(data, username, password)
    rows = LEN(data)
    hash_object = hashlib.md5(password.encode())
    md5_hash = hash_object.hexdigest()
    password = md5_hash
    LOOP i FROM 1 TO <rows step +1
        IF(username == data[i][0])THEN
            IF(password == data[i][3])THEN
                login_index = i
                RETURN login_index
            ENDIF
        ENDIF
        IF(username == data[i][2])THEN
            IF(password == data[i][3])THEN
                login_index = i
                RETURN login_index
            ENDIF
        ENDIF
        NEXT i
    ENDLOOP
        
    RETURN 0

    
    

FUNCTION check_usernameID(data, username)
    rows = LEN(data)
    LOOP i FROM 1 TO <rows step +1
        IF(username == data[i][0])THEN
            RETURN 1
        ENDIF
        IF(username == data[i][2])THEN
            RETURN 1
        ENDIF
        NEXT i

    ENDLOOP
    RETURN 0 



FUNCTION PRINT_title(title)
    PRINT("================================================================")
    PRINT(" " * int((64-LEN(title))/2) + title)
    PRINT("================================================================")



FUNCTION general_menu(list)
    length = LEN(list)
    LOOP i FROM 0 TO <length step +1
        PRINT(str(i+1), "-", list[i])
        NEXT i
    
    ENDLOOP
        
    PRINT("\n")



FUNCTION login_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
    
    i = 0 
    DOWHILE(True)
        login_details = login_menu(main_title)
        username_key = check_usernameID(data_clients, login_details[0])
        password_key = check_password(data_clients, login_details[0], login_details[1])
    
        IF(username_key == 1 AND password_key >= 1)THEN
            PRINT("You have successfully login!")
            BREAK
    
        ELSE IF(username_key == 1 AND password_key == 0)
            PRINT("Wrong password. Failed to login.")

        ELSE
            PRINT("Username does not exist. Failed to login.")
        
        ENDIF
        i = i + 1
        IF(i > 4)THEN
            BREAK
        ENDIF
    ENDDO
    IF(i > 4)THEN
        DECLARE menu = ["Continue","Return"]
            
        DOWHILE(True)
            general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF(choice == '1' OR choice == '2')THEN
                BREAK
            ENDIF
        ENDDO

        IF(choice == '1')THEN
            password_key = login_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
            RETURN password_key
        ENDIF  

        IF(choice == '2')THEN
            login_index = startup_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
            RETURN login_index
        ENDIF   
    ENDIF

    RETURN password_key

                        
                    

FUNCTION unregistered_interface(data_clients, data_carlist, space_cars,space_clients)
    title = "Guest, Welcome to Super Car Rental System"
    DECLARE menu = ["Register", "View Available Cars", "Return"]
    DOWHILE(True)
        PRINT_title(title)
        general_menu(menu)
        PRINT("Please Select: ")
        READ choice
        IF(choice == '1' OR choice == '2' OR choice == '3')THEN
            BREAK
        ENDIF
    ENDDO
    IF(choice == '1')THEN
        register_interface(data_clients, space_clients)
    ENDIF

    IF(choice == '2')THEN
        PRINT_table(data_carlist, 6, space_cars)
        PRINT("")
        DOWHILE(True)
            DECLARE menu = ["Return"]
            general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF(choice == '1')THEN
                BREAK
            ENDIF
        ENDDO
        IF(choice == '1')THEN
            RETURN
        ENDIF
    ENDIF
    IF(choice == '3')THEN
        RETURN
    ENDIF



FUNCTION register_interface(data_clients, space_clients)
    PRINT_title("You can register here")
    prev_id = data_clients[-1][0]
   
    DOWHILE(True)
        sign = 0
        DECLARE DECLARE data = []
        id = int(prev_id) + 1
        APPEND id TO data
        APPEND "Normal" TO data
        PRINT("Plase enter your Username")
        name = validation_length(space_clients[2])        
        i = 0
        LOOP i FROM 0 TO range(len(data_clients)) STEP +1
            IF(name == data_clients[i][2]) THEN
                PRINT("This username has been used. ")
                PRINT("")
                sign = 1
                break
            ENDIF
        ENDLOOP
        if(sign == 1):
            continue
        PRINT("")
        APPEND name TO data
        DOWHILE(True)
            PRINT("Plase enter your password")
            password_1 = validation_length(space_clients[3])
            PRINT("")
            PRINT("Please confirm your password")
            password_2 = validation_length(space_clients[3])
            IF(password_1 == password_2)THEN
                hash_object = hashlib.md5(password_1.encode())
                md5_hash = hash_object.hexdigest()
                password_1 = md5_hash
                APPEND password_1 TO data
                BREAK
            ELSE
                PRINT("The password you enter are not the same. Please try again")
                PRINT("")
            ENDIF
        ENDDO
        
        PRINT("")
        
        PRINT("Please enter your date of birth: ")
        birth_date = validation_date()
        PRINT("")
        APPEND birth_date TO data
        
        PRINT("Please enter your license: ")
        license = validation_length(space_clients[5])
        PRINT("")
        APPEND license TO data
        
        PRINT("Please enter your phone number: ")
        phone = validation_number(space_clients[6])
        PRINT("")
        APPEND phone TO data
        
        PRINT("Please enter your email: ")
        email = validation_email(space_clients[7])
        PRINT("")
        APPEND email TO data
        
        PRINT("Please enter your credit/debit card number: ")
        card = validation_number(12)
        PRINT("")
        APPEND card TO data
        APPEND 0 TO data
        APPEND 0 TO data
        
        
        PRINT_title("Confirm Registeration Details")
        k = 0
        LOOP i IN data:
            IF(k == 3)THEN
                k += 1
                CONTINUE
            ENDIF  

            PRINT(data_clients[0][k] + ": " + str(i))
            k += 1
        ENDLOOP
            
            
        DECLARE menu = ["Confirm", "Return"]
        DOWHILE(True)
            general_menu(menu)
            PRINT("Please Select: ")
            READ choice
            IF(choice == '1' OR choice == '2')THEN
                BREAK
            ENDIF
        ENDDO

        IF(choice == '1')THEN
            k = 0 
            LOOP i IN data:
                data[k] = str(i)
                k = k + 1
            ENDLOOP
            APPEND data TO data_clients
            WITH OPEN("./data/clients.txt", mode = 'w') AS clients_file:
                LOOP line IN data_clients:
                    temp = ",".join(line)
                    clients_file.write(temp + '\n')
                ENDLOOP
        
            PRINT_title("Registeration information has successfuly recorded.")
            LOOP remaining FROM 5 TO >-1 STEP -1
                sys.stdout.write("\r")
                sys.stdout.write("Will be directed in {:2d}......".format(remaining)) 
                sys.stdout.flush()
                time.sleep(1)
                NEXT remaining
            ENDLOOP
            sys.stdout.write("\n")
            RETURN
        ENDIF    
        
        
        IF(choice == '2')THEN
            RETURN                
        ENDIF
        
    ENDDO

            
            
    

FUNCTION startup_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
    
    DOWHILE(True)
        DOWHILE(True)
            choice = startup_menu(main_title)
            IF(choice == '1' OR choice == '2' OR choice == '3' OR choice == '4')THEN
                BREAK  
            ENDIF         
        ENDDO
        IF(choice == '1')THEN
            login_index = login_interface(main_title, data_clients, data_carlist, space_cars, space_clients)
            RETURN login_index
    
        ELSE IF(choice == '2')
            unregistered_interface(data_clients, data_carlist, space_cars, space_clients)

        ELSE IF(choice == '3')
            LOOP remaining FROM 5 TO >-1 STEP -1
                sys.stdout.write("\r")
                sys.stdout.write("System will exit in {:2d}.............".format(remaining)) 
                sys.stdout.flush()
                time.sleep(1)
                NEXT remaining
            ENDLOOP
        
            EXIT()
        ENDIF
    ENDDO




FUNCTION PRINT_table(data, mode, space, login_name = "")
    rows = LEN(data)
    start = 1
    IF(mode == 1)THEN
        columns = 11
        start = 2
        blanks = 180
        
    ELSE IF(mode == 2)
        columns = 13
        blanks = 183
        
    ELSE IF(mode == 3 OR mode == 5)
        columns = 19
        blanks = 302
        
    ELSE IF(mode == 4)
        columns = 13
        blanks = 143
    
    ELSE IF(mode == 6)
        columns = 4
        blanks = 61
    
    ELSE IF(mode == 7 OR mode == 8)
        columns = 19
        blanks = 302
    
    ENDIF

    k = 0 
    LOOP i IN data[0]:
        IF(mode == 4 AND (i == "Total Quantity" OR i == "Available" OR i == "Unavailable" OR i == "In Service" ))THEN
            k = k + 1
            CONTINUE
        ENDIF
        IF(mode == 6 AND (k >= 4 AND k <= 12))THEN
            k = k + 1
            CONTINUE
        ENDIF
        IF(mode == 1 AND k == 3)THEN
            k = k + 1
            CONTINUE
        ENDIF

        PRINT(i + " " * (int(space[k]) - int(LEN(i))) + " | ", end = "")
        k = k + 1
    ENDLOOP
    
    PRINT("")
    PRINT("-" * blanks)
    
    
        LOOP k FROM 0 TO <columns STEP +1 
            
            IF(mode == 4 AND (k == 5 OR k == 6 OR k ==7 OR k == 8))THEN
                CONTINUE
            ENDIF
            
            IF(mode == 5 AND data[i][0] != login_name)THEN
                CONTINUE
            ENDIF
            
            IF(mode == 7 AND data[i][0] != login_name)THEN
                CONTINUE
            ENDIF
            
            IF(mode == 8 AND data[i][1] != login_name)THEN
                CONTINUE
            ENDIF
            
            IF(mode == 1 AND k == 3)THEN
                CONTINU
            ENDIF

            PRINT(str(data[i][k]) + " " * (int(space[k]) - int(LEN(str(data[i][k])))) + " | ", end = "")

            NEXT k
        ENDLOOP
        
        IF((mode == 5 AND data[i][0] != login_name) OR (mode == 7 AND data[i][0] != login_name) OR (mode == 8 AND data[i][1] != login_name))THEN
            PASS
        ELSE
            PRINT("")
        ENDIF

        NEXT i
    ENDLOOP



FUNCTION PRINT_sorttable(data, mode, sequence, space)
    
    IF(mode == 1)THEN
        columns = 11
        blanks = 180
        
    ELSE IF(mode == 2)
        columns = 13
        blanks = 180
        
    ELSE IF(mode == 3)
        columns = 19
        blanks = 302
        
    ELSE IF(mode == 4)
        columns = 13
        blanks = 143
    ENDIF
    
    sequence.insert(0, 0)
    
    LOOP i IN sequence:
        LOOP k FROM 0 TO <columns STEP +1 
            IF(mode == 4 AND (k == 5 OR k == 6 OR k ==7 OR k == 8 ))THEN
                CONTINUE
            ENDIF

            IF(mode == 1 AND k == 3)THEN
                CONTINUE
            ENDIF
            
                
            PRINT(data[i][k] + " " * (int(space[k]) - int(LEN(data[i][k]))) + " | ", end = "")

            NEXT k
        ENDLOOP       
        IF(i == 0)THEN
            PRINT("")
            PRINT("-" * blanks, end = "")
        ENDIF

        PRINT("")
    ENDLOOP



FUNCTION sort_data(data, target, order, mode)
    start = 1
    count = 1    

    IF(mode == 1)THEN
        start = 2
        count = 2
    ENDIF
    DECLARE sample = []
    index = 0
    rows = LEN(data)
    LOOP i IN data[0]:
        IF(i == target)THEN
            BREAK
        ENDIF
        index = index + 1
    ENDLOOP
     
    LOOP i FROM start TO <rows STEP +1
        APPEND data[i][index] TO sample
        NEXT i 
    ENDLOOP
        
    len_sample = LEN(sample)
    
    DECLARE sequence = [*range(start, LEN_sample+count, 1)]
    
    IF(mode == 2 AND ((index >=5 AND index <=9) OR index == 12 OR index == 13))THEN
        LOOP i FROM start TO <len_sample STEP +1
            sample[i] = int(sample[i])
            NEXT i
        ENDLOOP
    ENDIF    
    IF(order == 0)THEN
        LOOP i FROM start TO < len_sample-1 STEP +1
            LOOP k FROM start TO <len_sample-i-1 STEP +1
                IF (sample[k] < sample[k+1])THEN
                    sample[k], sample[k+1] = sample[k+1], sample[k]
                    sequence[k], sequence[k+1] = sequence[k+1], sequence[k]
                ENDIF
                NEXT k
            ENDLOOP
            NEXT i 
        ENDLOOP
    
    ELSE IF(order == 1)
        LOOP i FROM start TO <len_sample-1 STEP +1
            LOOP k FROM start TO <len_sample-i-1 STEP +1
                IF (sample[k] > sample[k+1])THEN
                    sample[k], sample[k+1] = sample[k+1], sample[k]
                    sequence[k], sequence[k+1] = sequence[k+1], sequence[k]

                ENDIF
                NEXT k 
            ENDLOOP
            NEXT i
        ENDLOOP
    
    RETURN sequence



FUNCTION search_data(data, keyword, attribute, mode)
    start = 1
    IF(mode == 1)THEN
        start = 2
    ENDIF
    DECLARE sequence = []
    DECLARE sample = []
    rows = LEN(data)
    keyword = keyword.lower()
    
    k = 0
    LOOP i IN data[0]:
        IF attribute == i THEN
            index = k
        ENDIF
        k = k + 1  
    ENDLOOP      
    
    LOOP i FROM start TO <rows STEP +1
        APPEND data[i][index] TO sample
        NEXT i
    ENDLOOP
        
    LOOP i FROM 0 TO <LEN(sample) STEP +1
        sample[i] = sample[i].lower()
        NEXT i
    ENDLOOP
    
    i = 0
    
    LOOP i FROM 0 TO <LEN(sample) STEP +1
        IF keywordINsample[i]THEN
            APPEND i TO sequence
        ENDIF
        NEXT i
    ENDLOOP
    

    
    IF(mode == 1)THEN
        sequence = [x + 2 LOOP x IN sequence]
    ELSE
         sequence = [x + 1 LOOP x IN sequence]
    ENDIF
    RETURN sequence



FUNCTION validation_length(length)
    length = int(length)
    DOWHILE(True)
        PRINT(" ")
        READ temp
        IF(LEN(temp) <=length)THEN
            RETURN temp
        ELSE
            PRINT("You cannot exceed " + str(length) + " characters" )
            PRINT("")
        ENDIF
    ENDDO


FUNCTION alidation_number(length)
    length = int(length)
    DOWHILE(True)
        PRINT(" ")
        READ temp
        
        IF temp.isdecimal() == True AND LEN(temp) <= Length THEN
            RETURN temp
        ELSE
            PRINT("You can only enter " + str(length) +" digit of numbers" )
            PRINT("")
        ENDIF
    ENDDO


FUNCTION validation_email(length)
    length = int(length)
    DOWHILE(True)
        PRINT(" ")
        READ temp
        
        IF "@"INtemp AND ".com"INtemp THEN
            BREAK
        ELSE
            PRINT("Email format not correct" )
            PRINT("")
        ENDIF
    ENDDO
            
    DOWHILE(True)
        IF LEN(temp) <= length THEN
            BREAK
        ELSE
            PRINT("You cannot exceed " + str(length) + " characters" )
            PRINT("")
            PRINT(" ")
            READ temp
        ENDIF
    
    ENDDO
    RETURN temp


FUNCTION validation_date()
    
    DOWHILE(True)
        PRINT("Please enter date in DD-MM-YYYY")
        PRINT(" ")
        READ temp
        TRY
            date = datetime.datetime.strptime(temp, "%d-%m-%Y")
            birth = date.strftime("%d-%m-%Y")

            RETURN birth
        
        EXCEPT ValueError:
            PRINT("Error! Incorrect date format")    
            PRINT("")
    ENDDO

            
FUNCTION validation_totalquantity(data_carlist, car_data, mode = 1)

    DOWHILE(True)
        PRINT("Total Quantity = Available + Unavailable + In Service")
        PRINT("You can only input upto 4 positive digits")
        PRINT("")
        TRY
            PROMPT "What is the total quantity now? :"
            GET temp AS INTEGER
            IF temp < 0 THEN
                PRINT("You cannot enter negative digits")
                PRINT("Please enter again!")
                PRINT("")
                CONTINUE
            ENDIF
            
            IF LEN(str(temp)) > 4 THEN
                PRINT("You cannot exceed 4 digits")
            ENDIF
            
        EXCEPT ValueError:
            PRINT("You can only enter upto 4 positive integers. ")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        IF(mode == 2) THEN
            car_data = sub_total_quantity_menu2(temp, car_data)
            BREAK
        
            
        ELSE IF(temp > int(car_data[5]))
            car_data = sub_total_quantity_menu1(temp, car_data, 1)
            PRINT_title("This is the current record.")
            LOOP i FROM 0 TO <13 STEP +1
                PRINT(data_carlist[0][i] + ": " + str(car_data[i]))    
                NEXT i
            ENDLOOP
            BREAK
            
        ELSE IF(temp < int(car_data[5]))
            car_data = sub_total_quantity_menu1(temp, car_data, 0)
            PRINT_title("This is the current record.")
            LOOP i FROM 0 TO <13 STEP +1
                PRINT(data_carlist[0][i] + ": " + str(car_data[i]))    
                NEXT i
            ENDLOOP
            BREAK
        
        ELSE
            PRINT("Total Quantity is the same as before")
            PRINT("Do you want to alter quantity for each section? ")
            DECLARE menu = ["Yes", "Return"]
            DOWHILE(True)
                general_menu(menu)
                PRINT("Please Select: ")
                READ choice
                IF(choice == '1' OR choice == '2')
                    BREAK
            ENDDO
            
            IF(choice == '1')
                car_data = sub_total_quantity_menu2(temp, car_data)
                PRINT_title("This is the current record.")
                LOOP i FROM 0 TO <13 STEP +1
                    PRINT(data_carlist[0][i] + ": " + str(car_data[i])) 
                    NEXT i
                ENDLOOP
            RETURN car_data  
        ENDIF 
              
    
       
    ENDDO
    RETURN car_data 
     
            
            

FUNCTION sub_total_quantity_menu1(temp, car_data, order)
    count = abs(temp - int(car_data[5]))
    IF order == 1 THEN
        title = "added"
    ENDIF
    IF order == '2' THEN
        title = "deleted"
    ENDIF
    DOWHILE(True)
        PRINT("You have " + str(title) + " " + str(count) + " cars into the total quantity for car ID: " + str(car_data[0]))
        PRINT("Available + Unavailable + In Service = " + str(count))
        PRINT("Please enter the quantity for each section below: ")
        PRINT("")
        
        TRY
            PROMPT "Available  : "
            GET num1 AS INTEGER 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
            
        IF(LEN(str(num1)) <= 4 AND num1 >=0 AND num1 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE   
        ENDIF 
                
        TRY
            PROMPT "Unavailable: "
            GET num2 AS INTEGER 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num2)) <= 4 AND num2 >=0 AND num2 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE    
        ENDIF
                
        IF(num1 + num2 > count) THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF
                        
        TRY
            PROMPT "In Service : "
            GET num3 AS INTEGER 
            
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num3)) <= 4 AND num3 >=0 AND num3 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE      
        ENDIF 
                
        IF(num1 + num2 + num3 > count) THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF
        PRINT("")
        BREAK
    ENDDO
                
    DOWHILE(True)
        PRINT("Do you confirm the following changes: ")
        PRINT("Available     : " + str(num1))
        PRINT("Unavailable   : " + str(num2))
        PRINT("In Service    : " + str(num3))
                
        DECLARE menu = ["Confirm", "Return"]
        general_menu(menu)
        PRINT("Please select: ")
        READ choice
        IF(choice == '1' OR choice == '2') THEN
            BREAK
        ENDIF
    ENDDO
                
    IF(choice == '1') THEN
        car_data[5] = temp
        car_data[6] = int(car_data[6]) + num1
        car_data[7] = int(car_data[7]) + num2
        car_data[8] = int(car_data[8]) + num3          
    ENDIF                
    RETURN car_data

                

FUNCTION sub_total_quantity_menu2(temp, car_data)
    count = int(temp)
    DOWHILE(True)
        PRINT("Please reenter the quantity for 'Available', 'Unavailable', 'In Service'.")
        PRINT("Available + Unavailable + In Service = Total Quantity")
        PRINT("The total quantity now is: " + str(temp))
        
        TRY
            PROMPT "Available  : "
            GET num1 AS INTEGER 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
            
        IF(LEN(str(num1)) <= 4 AND num1 >=0 AND num1 <= count) THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE    
        ENDIF        
        TRY
            PROMPT "Unavailable: "
            GET num2 AS INTEGER 
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num2)) <= 4 AND num2 >=0 AND num2 <= count)THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE    
        ENDIF   

        IF(num1 + num2 > count)THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF           

        TRY
            PROMPT "In Service : "
            GET num3 AS INTEGER 
            
        EXCEPT ValueError:
            PRINT("You can only enter integers")
            PRINT("Please enter again")
            PRINT("")
            CONTINUE
        
        IF(LEN(str(num3)) <= 4 AND num3 >=0 AND num3 <= count)THEN
            PASS
        ELSE
            PRINT("You can only enter a 4 digit of positive integer not larger than " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE       
        ENDIF

        IF(num1 + num2 + num3 > count)THEN
            PRINT("The total for three sections cannot exceed " + str(count))
            PRINT("Please enter again!")
            PRINT("")
            CONTINUE
        ENDIF
        PRINT("")
        BREAK
    ENDDO
                
    DOWHILE(True)
        PRINT("Do you confirm the following changes: ")
        PRINT("Total Quantity: " + str(temp))
        PRINT("Available     : " + str(num1))
        PRINT("Unavailable   : " + str(num2))
        PRINT("In Service    : " + str(num3))
                
        DECLARE menu = ["Confirm", "Return"]
        general_menu(menu)
        PRINT("Please select: ")
        READ choice
        IF(choice == '1' OR choice == '2')THEN
            BREAK
        ENDIF
    ENDDO
                
    IF(choice == '1')THEN
        car_data[5] = temp
        car_data[6] = num1
        car_data[7] = num2
        car_data[8] = num3          
    ENDIF

    RETURN car_data


FUNCTION validation_cartypes()
    
    DOWHILE(True)
        PRINT("You can only enter: City, Electric, Prestige, Van, Truck")    
        PRINT("")
        PRINT("Please enter car type: ")
        READ temp
        temp.lower()
        IF temp == 'city' OR temp == 'electric' OR temp == 'prestige' OR temp == 'van' OR temp == 'truck' THEN:
            BREAK
        ENDIF    
    ENDDO        
    temp = temp[0].upper() + temp[1:LEN(temp)]
    RETURN temp 
     


FUNCTION validation_carnormal(target)
    
    PRINT("Please enter " + str(target) +": ")
    READ temp
    
    temp = temp[0].upper() + temp[1:LEN(temp)].lower()
    RETURN temp
